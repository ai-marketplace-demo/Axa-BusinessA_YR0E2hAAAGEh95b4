AWSTemplateFormatVersion: 2010-09-09

Description: Integrate and deploy continuously when software changes

Parameters:

  PackageName:
    Description: Seed the name of most resources created in the cloud for this project
    Default: datahub
    Type: String

  ArtifactBucket:
    Description: The place to put and get software artifacts for this pipeline
    Default: datahub.dev.code
    Type: String

  CodeCommitRepository:
    Description: The repository attached to the pipeline
    Default: datahubui
    Type: String

  SsmPrefix:
    Description: The prefix of every parameter stored
    Default: datahub
    Type: String

  CodePipelineProductionRole:
    Description: Name of the IAM Role that will be added to the bucket policy for cross account access
    Type: String

  ProductionAccountID:
    Description: Production AWS Account ID
    Type: String

  EnvironmentName:
    Description: ENV name
    Type: String
    Default: staging

Resources:
  CodePipelineSNSTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: 'datahubui-pipeline-topic'
      Subscription:
        - Endpoint: "mamallem@amazon.com"
          Protocol: "email"
        - Endpoint: "moshirm@amazon.com"
          Protocol: "email"
  CodePipelineTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Id: CodePipelineTopicPolicy
        Version: 2012-10-17
        Statement:
          - Sid: ListAllDefaultOwnAccount
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Resource:
              - Ref: CodePipelineSNSTopic
            Condition:
              StringEquals:
                'AWS:SourceOwner': !Sub '${AWS::AccountId}'
      Topics:
        - Ref: CodePipelineSNSTopic

  CodePipelineTrigger:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-pipelineui-trigger"
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - CodeCommit Repository State Change
        resources:
          - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}'
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
      Targets:
        - Id: !Ref CodePipeline
          RoleArn: !GetAtt CloudWatchEventRole.Arn
          Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}'

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AWS::StackName}"
      RoleArn: !GetAtt PipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket

      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !Ref CodeCommitRepository
                BranchName: master
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceCodeOutputArtifact
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceCodeOutputArtifact
              OutputArtifacts:
                - Name: BuildOutputArtifact
              Configuration:
                ProjectName: !Ref DeployWebInfrastructure
              RunOrder: 1

  DeployWebInfrastructure:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-CodeBuild
      ServiceRole: !GetAtt PipelineServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: "aws/codebuild/nodejs:8.11.0"
      Source:
        Type: CODEPIPELINE
        BuildSpec: templates/buildspec-front-ui.yml
      TimeoutInMinutes: 10

  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - events.amazonaws.com
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-events-permissions-${AWS::Region}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:

              - Effect: Allow  # CloudWatch Events to execute CodePipeline
                Action:
                  - codepipeline:StartPipelineExecution
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"

  PipelineServiceRole:
    Type: AWS::IAM::Role  # shared by CodePipeline, CodeBuild and CloudFormation
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com

  PipelineServicePolicy:
    Type: AWS::IAM::Policy  # shared by CodePipeline, CodeBuild and CloudFormation
    Properties:
      PolicyName: !Sub '${AWS::StackName}-permissions-${AWS::Region}'
      Roles:
        - !Ref PipelineServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - cloudfront:CreateInvalidation
            Resource: "*"

          - Effect: Allow
            Action:
              - codecommit:GetBranch
              - codecommit:GetCommit
              - codecommit:UploadArchive
              - codecommit:GetUploadArchiveStatus
              - codecommit:CancelUploadArchive
              - codecommit:GitPull
            Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepository}"

          - Effect: Allow  # CodePipeline to trigger CodeBuild projects
            Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:StopBuild
            Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/${AWS::StackName}-*"

          - Effect: Allow  # CloudFormation to do its job
            Action:
              - cloudformation:CreateStack
              - cloudformation:DescribeStacks
              - cloudformation:DeleteStack
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ListChangeSets
            Resource:
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${PackageName}*"
              - !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/*"

          - Effect: Allow  # CloudFormation to handle templates
            Action:
              - cloudformation:ValidateTemplate
              - cloudformation:GetTemplateSummary
            Resource: "*"

          - Effect: Allow  # CloudWatch Events for this package
            Action:
              - events:DeleteRule
              - events:DescribeRule
              - events:DisableRule
              - events:EnableRule
              - events:PutRule
              - events:PutTargets
              - events:RemoveTargets
            Resource: !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/${PackageName}*"

          - Effect: Allow  # managing users for this package
            Action:
              - iam:*
            Resource: "*"

          - Effect: Allow  # managing secrets for this package
            Action:
              - secretsmanager:*
            Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'

          - Effect: Allow  # managing kms for this package
            Action:
              - kms:*
            Resource: "*"

          - Effect: Allow  # management of EC2 for this package
            Action:
              - ec2:DescribeSubnets
              - ec2:DescribeVpcs
              - ec2:DescribeSecurityGroups
            Resource: "*"

          - Effect: Allow  # management of Lambda for this package
            Action:
              - lambda:*
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${PackageName}*"

          - Effect: Allow  # usage of available Lambda function on this account
            Action:
              - lambda:InvokeFunction
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"

          - Effect: Allow  # list available Lambda function on this account
            Action:
              - lambda:ListFunctions
              - lambda:ListTags
            Resource: '*'

          - Effect: Allow  # Lambda to subscribe to any source
            Action:
              - lambda:CreateEventSourceMapping
              - lambda:DeleteEventSourceMapping
              - lambda:GetEventSourceMapping
            Resource: "*"

          - Effect: Allow  # creation and usage of CloudWatch Logs
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DeleteLogGroup
              - logs:DeleteLogStream
              - logs:PutLogEvents
              - logs:PutRetentionPolicy
              - logs:PutSubscriptionFilter
              - logs:DeleteSubscriptionFilter
            Resource: "arn:aws:logs:*:*:*"

          - Effect: Allow  # reading and writing transient S3 objects
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::codepipeline-${AWS::Region}-*/*"
              - !Sub "arn:aws:s3:::${ArtifactBucket}/*"

          - Effect: Allow  # management of S3 buckets for this package
            Action:
              - s3:CreateBucket
              - s3:GetBucketAcl
              - s3:GetBucketNotification
              - s3:GetBucketTagging
              - s3:PutBucketAcl
              - s3:PutBucketNotification
              - s3:PutBucketTagging
            Resource: !Sub "arn:aws:s3:::${PackageName}*"

          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:GetBucketVersioning"
              - "s3:PutObject"
              - "s3:PutObjectAcl"
            Resource:
              - !Sub "arn:aws:s3:::datahub-cloudfront-origin-${EnvironmentName}"
              - !Sub "arn:aws:s3:::datahub-cloudfront-origin-${EnvironmentName}/*"

          - Effect: Allow  # CloudFormation to list SNS topics
            Action:
              - SNS:GetTopicAttributes
              - SNS:SetTopicAttributes
              - sns:ListTopics
              - sns:CreateTopic
              - SNS:DeleteTopic
            Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:*"

          - Effect: Allow  # management of SNS resources for this package
            Action:
              - sns:*
            Resource: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${PackageName}*"

          - Effect: Allow  # access to parameters in the region
            Action:
              - ssm:*
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"

          - Effect: Allow  # storage of additional parameters
            Action:
              - ssm:PutParameter
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${SsmPrefix}*"

          - Effect: Allow  # assume any role in the same region
            Action:
              - sts:AssumeRole
            Resource: !Sub "arn:aws:ssm:${AWS::Region}:*:*"

          - Effect: Allow  # assume codePipelineRole in Production
            Action:
              - sts:AssumeRole
            Resource: !Sub "arn:aws:iam::${ProductionAccountID}:role/${CodePipelineProductionRole}"
