# mailswitch-webservice for AXA AI Market Place.

service: mailswitch-webservice

provider:
  name: aws
  runtime: python3.8
  region: eu-central-1
  bucket_artifacts: ${opt:bucket-artifacts}
  stage: ${opt:stage, "dev"}
  role: !GetAtt MailswitchEndpointLambdaRole.Arn
  environment:
    LOGURU_LEVEL: INFO
  deploymentBucket:
    name: ${self:provider.bucket_artifacts}


custom:
  unique_stack_name: ${self:service}-${self:provider.stage}
  Claims: Claims

  # sagemaker vars
  sagemaker_endpoint: ${self:custom.unique_stack_name}-endpoint
  sagemaker_endpoint_config: ${self:custom.unique_stack_name}-endpoint-config
  sagemaker_model: ${self:custom.unique_stack_name}-model

  # iam roles and policies vars
  lambda_role: ${self:custom.unique_stack_name}-lambda-role
  lambda_policy: ${self:custom.unique_stack_name}-lambda-policy
  sagemaker_role: ${self:custom.unique_stack_name}-sagemaker-role
  sagemaker_policy: ${self:custom.unique_stack_name}-sagemaker-policy


  assets:
    auto: true
    targets:
      - bucket: ${self:provider.bucket_artifacts}
        empty: true
        files:
          - source: artifacts/
            globs:
              - "**/*"
          - source: .serverless/
            globs:
              - "**/*"


package:
  excludeDevDependencies: false
  exclude:
    - ./**
  include:
    - mailswitch_webservice/**

plugins:
  - serverless-python-requirements
  - serverless-pseudo-parameters
  - serverless-s3-remover
  - serverless-s3-deploy

functions:
  MailswitchEndpoint:
    name: ${self:custom.unique_stack_name}-MailswitchEndpoint
    handler: mailswitch_webservice/lambda_handler/mailswitch_endpoint.handler
    events:
      - http:
          path: predict
          method: post
    timeout: 30
    environment:
      # here we reference the name of the sagemaker endpoint for claims
      Claims: ${self:custom.sagemaker_endpoint}


resources:
  Mappings:
    RegionMap:
      eu-west-1:
        sagemakerModelImageAccount: "141502667606"
      eu-central-1:
        sagemakerModelImageAccount: "492215442770"

  Resources:
    #############
    # SageMaker #
    #############

    # here we define a sagemaker model, that configures the orchestration of our
    # models (feateng model + ML model).
    # We also define a sagemaker endpoint that takes as input a
    # sagemaker endpoint configuration and a sagemaker model.

    SageMakerModel:
      Type: AWS::SageMaker::Model
      Properties:
        Containers:
          - ContainerHostname: FeatengModel
            Environment:
              SAGEMAKER_SPARKML_SCHEMA: '{ "input": [ { "name": "clean_text", "type": "string" }, { "name": "sender_domain", "type": "string" }, { "name": "receiver_domain", "type": "string" }, { "name": "receiver_user", "type": "string" } ], "output": { "name": "final_features", "type": "double", "struct": "vector" } }'
            Image: !Sub
              - ${ACCOUNT}.dkr.ecr.${AWS::Region}.amazonaws.com/sagemaker-sparkml-serving:2.4
              - { ACCOUNT: !FindInMap [RegionMap, !Ref "AWS::Region", sagemakerModelImageAccount] }
            Mode: SingleModel
            ModelDataUrl: s3://${self:provider.bucket_artifacts}/feateng_model.tar.gz
          - ContainerHostname: MLModel
            Environment:
              SAGEMAKER_PROGRAM: ml_model_serving_script.py
              SAGEMAKER_SUBMIT_DIRECTORY: s3://${self:provider.bucket_artifacts}/ml_model_serving_script.tar.gz
              SAGEMAKER_MODEL_METADATA: '{"ml_model_version": "s3://${self:provider.bucket_artifacts}/ml_model.tar.gz", "feateng_model_version": "s3://${self:provider.bucket_artifacts}/feateng_model.tar.gz", "sagemaker_model_name": "MailswitchWebserviceSageMakerModel", "artifacts_version": "2020-12-29-21-41-09-499", "category": "Claims"}'
            Image: !Sub
              - ${ACCOUNT}.dkr.ecr.${AWS::Region}.amazonaws.com/sagemaker-scikit-learn:0.23-1-cpu-py3
              - { ACCOUNT: !FindInMap [RegionMap, !Ref "AWS::Region", sagemakerModelImageAccount] }
            Mode: SingleModel
            ModelDataUrl: s3://${self:provider.bucket_artifacts}/ml_model.tar.gz
        EnableNetworkIsolation: False
        ExecutionRoleArn: !GetAtt SagemakerRole.Arn
        ModelName: ${self:custom.sagemaker_model}
        
    SageMakerEndpointConfig:
      Type: AWS::SageMaker::EndpointConfig
      Properties:
        EndpointConfigName: ${self:custom.sagemaker_endpoint_config}
        ProductionVariants:
          - InitialInstanceCount: 1
            InitialVariantWeight: 1.0
            InstanceType: ml.t2.large
            ModelName: !GetAtt SageMakerModel.ModelName
            VariantName: SageMakerModel

    SageMakerEndpoint:
      Type: AWS::SageMaker::Endpoint
      Properties:
        EndpointConfigName: !GetAtt SageMakerEndpointConfig.EndpointConfigName
        EndpointName: ${self:custom.sagemaker_endpoint}


    #######
    # IAM #
    #######

    # here we define the roles and policies for the lambda functions
    # and for the sagemaker services we use

    MailswitchEndpointLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.lambda_role}
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - !Ref MailswitchEndpointLambdaPolicy
        MaxSessionDuration: 3600

    MailswitchEndpointLambdaPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:custom.lambda_policy}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: VariousSources
              Effect: Allow
              Action:
                - ec2:DescribeVpcEndpoints
                - ec2:DescribeRouteTables
                - ec2:CreateNetworkInterface
                - ec2:DeleteNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DescribeSecurityGroups
                - ec2:DescribeSubnets
                - ec2:DescribeVpcAttribute
                - iam:GetRole
                - iam:UntagRole
                - iam:ListAttachedRolePolicies
                - iam:TagRole
                - iam:ListRoles
                - iam:ListRolePolicies
                - iam:GetRolePolicy
                - cloudwatch:PutMetricData
              Resource:
                - "*"
            - Sid: S3ListReadWrite
              Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:ListBucket
                - s3:ListObjects
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:PutObjectVersionAcl
              Resource:
                - arn:aws:s3:::mailswitch*
                - arn:aws:s3:::mailswitch*/*
            - Effect: Allow
              Action:
                - sagemaker:InvokeEndpoint
              Resource:
                - arn:aws:sagemaker:#{AWS::Region}:#{AWS::AccountId}:endpoint/mailswitch-webservice*
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"


    SagemakerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.sagemaker_role}
        Path: /
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: sagemaker.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - !Ref SagemakerPolicy
        MaxSessionDuration: 3600

    SagemakerPolicy:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        ManagedPolicyName: ${self:custom.sagemaker_policy}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: "*"
            Condition:
              StringEqualsIgnoreCase:
                s3:ExistingObjectTag/SageMaker: 'true'
          - Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:GetBucketLocation
              - s3:ListBucket
              - s3:ListAllMyBuckets
              - s3:GetBucketCors
              - s3:PutBucketCors
              - s3:GetObject
            Resource:
              - arn:aws:s3:::mailswitch*
              - arn:aws:s3:::mailswitch*/*
              - arn:aws:s3:::${self:provider.bucket_artifacts}/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "*"
          - Effect: Allow
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource: arn:aws:ecr:#{AWS::Region}:314189662144:repository/*